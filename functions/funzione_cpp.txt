//============================================================================
// Name        : Meccatronici.cpp
// Author      : Calegari-Piffari
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <cstdlib>
#include <stdio.h>
#include <string.h>
#include <fstream>
using namespace std;
double calcola_m_a(double*);
double calcola_m_a(double*,int);
const char* tempPassingFilePath = ".\\GainParametersToController.txt";
const char* definitivePassingFilePath = ".\\GainParametersConfirmed.txt";
const int windowWidth = 200;
double k_simulazione_discreta[4];
double phi = 0;
double phi_precedente = 0;
double phi_p = 0;
double theta = 0;
double theta_precedente = 0;
double theta_p = 0;
double Ts = 0.001;
double phi_p_setpoint = 10;
double m_a_phi[windowWidth] = {0};
double m_a_phi_p[windowWidth] = {0};
double m_a_theta[windowWidth] = {0};
double m_a_theta_p[windowWidth] = {0};
double m_a_motore [windowWidth] = {0};
double integrator_controller = 0;
double integrator_controller_motor = 0;
double K_integrazione = 0.002;
double desidered_cm = 0;
double actual_cm = 0;

void read_k(){

	ifstream tempGainFile;
	ifstream confirmedGainFile;

	// First: try to open temp file (which temporary gains passed from opc ua client)
	tempGainFile.open(tempPassingFilePath);
	if(!tempGainFile) {
		// If there's no temporary passing file, try to open confirmed parameters
		confirmedGainFile.open(tempPassingFilePath);
		if (!confirmedGainFile) {
			cout << "Error on parameters reading" << endl;
		} else {
			// Read confirmed parameters
			if(confirmedGainFile.is_open()) {
				cout << "confirmedGainFile is open" << endl;
				std::string line;
				int index = 0;
			    while (std::getline(confirmedGainFile, line)) {
			    	if(index <= 3){
			    		// Read onlyt the first fourth lines
			    		char *copy = strdup(line.c_str()); // Create temp char* copy of std::string line
			    		char* token = strtok(copy, " ");
						token = strtok(NULL, copy); // Get the second token (the double value)
						cout << "Gain value read: -> K" << index << " = " << token << endl;
						free(copy);
			    		k_simulazione_discreta[index] = atof(token);
			    		cout << "Gain value parsed -> K" << index << " = " << k_simulazione_discreta[index] << endl;
					}
			        index++;
			    }
			    confirmedGainFile.close();
			} else {
				cout << "Something went wrong with confirmed file" << endl;
			}
		}
	} else {
		// Read temporary parameters
		if(tempGainFile.is_open()) {
			cout << "tempGainFile is open" << endl;
			std::string line;
			int index = 0;
		    while (std::getline(tempGainFile, line)) {
		    	if(index <= 3){
		    		// Read onlyt the first fourth lines
		    		char *copy = strdup(line.c_str()); // Create temp char* copy of std::string line
		    		char* token = strtok(copy, " ");
					token = strtok(NULL, copy); // Get the second token (the double value)
					cout << "Gain value read: -> K" << index << " = " << token << endl;
					free(copy);
		    		k_simulazione_discreta[index] = atof(token);
		    		cout << "Gain value parsed -> K" << index << " = " << k_simulazione_discreta[index] << endl;
				}
		        index++;
		    }
		    tempGainFile.close();
		} else {
			cout << "Something went wrong with temporary file" << endl;
		}
	}
}

void controllore(){

	double cm_state_feedback  = k_simulazione_discreta[0]*phi + k_simulazione_discreta[1]*phi_p + k_simulazione_discreta[2]*theta + k_simulazione_discreta[3]*theta_p;
	double difference_phi_p  = phi_p - phi_p_setpoint;
	integrator_controller = integrator_controller + K_integrazione*Ts*difference_phi_p;
	desidered_cm = integrator_controller - cm_state_feedback;
}

void controllore_motore(int counter){
	//////////////////da verificare la media mobile, c'era un errore in matlab/////////////////
	double cm_setpoint = desidered_cm;
	double corrente_attuale_noise = rand();
	//////////////////////////////////da rivedere le costanti/////////////////////////////////
	double k_t = 0.1;
	double Ts = 0.0001;
	double P = 1;
	double I = 980;
	if(cm_setpoint > 2)
		cm_setpoint = 2;
	if(cm_setpoint <-2)
		cm_setpoint = -2;
	double corrente_setpoint = cm_setpoint/k_t;
	m_a_motore[counter] = corrente_attuale_noise;
	double media_pesata = calcola_m_a(m_a_motore);
	double corrente_filtrata = media_pesata;
	double differenza_corrente  = corrente_setpoint - corrente_filtrata;
	integrator_controller_motor = I*Ts*differenza_corrente + integrator_controller_motor;
	actual_cm = P*differenza_corrente + integrator_controller_motor;
}

void read_sensor_phi(int counter){
	m_a_phi [counter] =  rand();
	double media_pesata = calcola_m_a(m_a_phi);
	phi_precedente = phi;
	phi = media_pesata;
}

void read_sensor_theta(int counter){
	m_a_theta [counter] =  rand();
	double media_pesata = calcola_m_a(m_a_theta);
	theta_precedente = theta;
	theta = media_pesata;
}

void calculate_phi_p(int counter){
	m_a_phi_p[counter] = (phi-phi_precedente)/Ts;
	double media_pesata = calcola_m_a(m_a_phi_p);
	phi_p = media_pesata;
}

void calculate_theta_p(int counter){
	m_a_theta_p[counter] = (theta-theta_precedente)/Ts;
	double media_pesata = calcola_m_a(m_a_theta_p);
	theta_p = media_pesata;
}

double calcola_m_a(double* media_mobile){

	double media_pesata = 0;
	for(int i = 0; i<windowWidth;i++){
		media_pesata = media_pesata + 1/windowWidth * media_mobile[i];
	}
	return media_pesata;

}
double calcola_m_a(double* media_mobile,int windowWidth){

	double media_pesata = 0;
	for(int i = 0; i<windowWidth;i++){
		media_pesata = media_pesata + 1/windowWidth * media_mobile[i];
	}
	return media_pesata;

}

int main() {
	cout << "!!!Hello World!!!" << endl; // prints !!!Hello World!!!
	int counter = 0;
	while(true){
		read_sensor_phi(counter);
		read_sensor_theta(counter);
		calculate_phi_p(counter);
		calculate_theta_p(counter);
		read_k();
		controllore();
		controllore_motore(counter);
		counter = (counter+1)%windowWidth;
		cout<<(actual_cm)<<endl;
	}

	return 0;
}
